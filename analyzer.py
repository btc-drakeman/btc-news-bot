from strategy import analyze_indicators
from spike_detector import detect_spike, detect_crash
import requests
import pandas as pd

BASE_URL = 'https://api.mexc.com/api/v3/klines'

def fetch_ohlcv(symbol: str, interval: str = '1m', limit: int = 100):
    params = {
        'symbol': symbol,
        'interval': interval,
        'limit': limit
    }
    try:
        res = requests.get(BASE_URL, params=params, timeout=10)
        res.raise_for_status()
        raw = res.json()
        df = pd.DataFrame(raw, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_volume'
        ])
        df['close'] = df['close'].astype(float)
        df['volume'] = df['volume'].astype(float)
        return df
    except Exception as e:
        print(f"‚ùå {symbol} Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: {e}")
        return None

def analyze_symbol(symbol: str):
    df = fetch_ohlcv(symbol)
    if df is None or len(df) < 50:
        return None

    messages = []

    spike_msg = detect_spike(symbol, df)
    if spike_msg:
        messages.append(spike_msg)

    crash_msg = detect_crash(symbol, df)
    if crash_msg:
        messages.append(crash_msg)

    direction, score = analyze_indicators(df)
    if direction != 'NONE':
        plan = generate_trade_plan(df, leverage=10)
        strategy_msg = f"""
üìä {symbol.upper()} Í∏∞Ïà† Î∂ÑÏÑù (MEXC)
üïí ÏµúÍ∑º Í∞ÄÍ≤©: ${plan['price']:,.2f}

üîµ Ï∂îÏ≤ú Î∞©Ìñ•: {direction}
‚ñ∂Ô∏è Ï¢ÖÌï© Î∂ÑÏÑù Ï†êÏàò: {score} / 5.0

üí∞ ÏßÑÏûÖ Í∂åÏû•Í∞Ä: {plan['entry_range']}
üõë ÏÜêÏ†àÍ∞Ä: {plan['stop_loss']}
üéØ ÏùµÏ†àÍ∞Ä: {plan['take_profit']}
        """
        messages.append(strategy_msg)

    else:
        # Î∞©Ìñ•ÏÑ± ÏóÜÏùåÏóêÎèÑ Î∞òÎìúÏãú Î©îÏãúÏßÄ Ï∂úÎ†•
        fallback_msg = f"""
üìä {symbol} Î∂ÑÏÑù Í≤∞Í≥º
üïí ÏµúÍ∑º Í∞ÄÍ≤©: ${price:.2f}

‚ö†Ô∏è ÌòÑÏû¨ ÎöúÎ†∑Ìïú Î∞©Ìñ• Ïã†Ìò∏ ÏóÜÏùå
üìå Í¥ÄÎßù Ï∂îÏ≤ú
"""
        messages.append(fallback_msg)

    return messages
